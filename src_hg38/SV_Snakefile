#grab SAMPLE name from vcf input
SAMPLE = str(config['input_vcf']).split('.vcf')[0]
# logic to parse ped for families
# can either be  multiple families (a list) in the yaml as below
# need to grab the family names from it
if type(config['ped']) == list:
	PEDfile = [x.split('.ped')[0].split('/')[-1] for x in config['ped']]
	PEDbase = '/'.join(config['ped'][0].split('.ped')[0].split('/')[:-1]) + '/'
# otherwise just one family can be provided, which would be a str as below:
else:
	PEDfile = config['ped'].split('.ped')[0].split('/')[-1]
	PEDbase = '/'.join(config['ped'].split('.ped')[0].split('/')[:-1]) + '/'

if PEDbase == '/':
	PEDbase = ''

if type(config['family_name']) == str:
	family_name_con = config['family_name']
else:
	family_name_con = '|'.join(config['family_name'])

def pick():
	# modifies VEP call to either pick most canonical tx or 
	# return all tx possibilities
	if config['pick'].upper() == 'CANONICAL':
		out = '--pick_allele_gene  --pick_order canonical, tsl, biotype, ccds, length '
	if config['pick'].upper() == 'ALL':
		out = '--flag_pick_allele_gene '
	return(out)

# import regions
REGIONS_file = config['regions']
REGIONS = open(REGIONS_file).readlines()
REGIONS = [r.strip() for r in REGIONS]
MT_CONTIGS="MT,GL000207.1,GL000226.1,GL000229.1,GL000231.1,GL000210.1,GL000239.1,GL000235.1,GL000201.1,GL000247.1,GL000245.1,GL000197.1,GL000203.1,GL000246.1,GL000249.1,GL000196.1,GL000248.1,GL000244.1,GL000238.1,GL000202.1,GL000234.1,GL000232.1,GL000206.1,GL000240.1,GL000236.1,GL000241.1,GL000243.1,GL000242.1,GL000230.1,GL000237.1,GL000233.1,GL000204.1,GL000198.1,GL000208.1,GL000191.1,GL000227.1,GL000228.1,GL000214.1,GL000221.1,GL000209.1,GL000218.1,GL000220.1,GL000213.1,GL000211.1,GL000199.1,GL000217.1,GL000216.1,GL000215.1,GL000205.1,GL000219.1,GL000224.1,GL000223.1,GL000195.1,GL000212.1,GL000222.1,GL000200.1,GL000193.1,GL000194.1,GL000225.1,GL000192.1,NC_007605"

# set global Snakemake wildcard constraints
wildcard_constraints:
	sample=SAMPLE,
	region = '.*\d|MT_contigs',
#	region = '^[0-9a-zA-Z]+:\d+-\d+'
	family_name=family_name_con

localrules: query_gemini

if config['family_name'] == '':
	rule all:
		input:
			'SV.gemini.db'
else:
	rule all:
		input:
			expand('sample_reports/{sample}.{family_name}.PED_{ped}.lenient{gemini_lenient}.SeeGEM.report.html', \
				sample=SAMPLE, \
				ped=PEDfile, \
				family_name=config['family_name'], \
				gemini_lenient = ['Yes','No'])

# annotate with VEP
# two paths here, set by config['pick'] in config.yaml and the pick() function:
# 1. 'canonical' only returns one consequence per variant. 
# 		Use this for clinical returns, as no risk of using odd tx with 
# 		high consequence as choice in gemini
# 2. 'all' will do multiple annotations with VEP and gemini will use 
# 	the most serious consequence. 
# 		Use for more research returns, to increase chances of finding 
# 		interesting variants at cost of lower specificity.
rule VEP_annotate:
	input:
		config['input_vcf']
	output:
		vcf = temp('temp/SORTED.VT.VEP.vcf.gz'),
		index = temp('temp/SORTED.VT.VEP.vcf.gz.tbi')
	params:
		pick = pick()
	shell:
		"""
		module load {config[VEP_version]}
		module load {config[samtools_version]}
		vep -i {input} --offline \
			--cache --dir_cache $VEPCACHEDIR \
			--fasta $VEPCACHEDIR/GRCh37.fa --species human --assembly GRCh37  \
			--format vcf \
			--output_file {output.vcf} \
			--canonical \
			--ccds \
			--total_length \
			--hgvs \
			--symbol \
			--numbers \
			--biotype \
			--total_length \
			--pubmed \
			--gene_phenotype \
			{params.pick} \
            --fields Allele,Consequence,Codons,Amino_acids,Gene,SYMBOL \
			--vcf --compress_output bgzip --force_overwrite 
		# tabix
		tabix -f -p vcf {output.vcf}
		"""

# vcfanno(tate)
rule run_vcfanno:
	input:
		vcf = 'temp/SORTED.VT.VEP.vcf.gz',
		tbi = 'temp/SORTED.VT.VEP.vcf.gz.tbi'
	output:
		vcf = 'temp/VCFANNO.SORTED.VT.VEP.vcf.gz',
		tbi = 'temp/VCFANNO.SORTED.VT.VEP.vcf.gz.tbi'
	shell:
		 """
		module load {config[vcfanno_version]}
		vcfanno -permissive-overlap -p {threads} -lua {config[vcfanno_lua]} {config[vcfanno_conf]} {input.vcf} | bgzip > {output.vcf}
		tabix -f -p vcf {output.vcf}
        """

# create gemini database
rule make_gemini_db:
	input:
		vcf = 'temp/VCFANNO.SORTED.VT.VEP.vcf.gz',
		index = 'temp/VCFANNO.SORTED.VT.VEP.vcf.gz.tbi'
	output:
		'SV.gemini.db'
	shell:
		"""
		module load {config[vcf2db_version]}
		vcf2db.py {input.vcf} {config[ped]} {output}
		"""

# now write report for each family given in the yaml family_name section
rule query_gemini:
	input:
		db = '{sample}.PED_{ped}.gemini.db',
		peddy_ped = '{sample}_PEDDY.ped_check.csv',
		peddy_het = '{sample}_PEDDY.het_check.csv',
		peddy_sex = '{sample}_PEDDY.sex_check.csv'
	output:
		report_name = '{sample}.{family_name}.PED_{ped}.lenient{gemini_lenient}.SeeGEM.report.html',
		report_path = 'sample_reports/{sample}.{family_name}.PED_{ped}.lenient{gemini_lenient}.SeeGEM.report.html'
	resources: res=1
	shell:
		"""
		mkdir -p sample_reports
		module load {config[R_version]}
		module load {config[gemini_version]}
		Rscript {config[SeeGEM_script]} {input.db} {wildcards.family_name} {output.report_name} {wildcards.sample}_PEDDY {config[aaf_change]} {config[gemini_lenient]}
		cp {output.report_name} {output.report_path}
		"""
